<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[New Idea Lab]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2015-07-07T16:27:57.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[floydreamer]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[用github pages和hexo搭建静态博客]]></title>
    <link href="http://yoursite.com/2015/06/28/hexo/"/>
    <id>http://yoursite.com/2015/06/28/hexo/</id>
    <published>2015-06-28T09:16:03.000Z</published>
    <updated>2015-07-07T16:27:57.000Z</updated>
    <content type="html"><![CDATA[<p>在学习用github的时候偶然看见可以用github pages搭建博客，很感兴趣，毕竟要买服务器搭建独立博客的话，总是要考虑空间续费以及会不会被墙的问题。对于github是新手，即使看了很多教程也依然花了好些时间来熟悉操作。教程也并不是尽善尽美。 在终于搭建好以后，还是决定把步骤详细地记录一下，并附上自己的一些心得，万一哪天有一个跟我一样的小白用得上呢：）</p>
<p>首先附上我参考的一些教程，感谢写下详细教程的各位。</p>
<p><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>
<p><a href="http://andrewliu.tk/2014/11/21/通过Hexo在Github上搭建博客教程" target="_blank" rel="external">通过Hexo在Github上搭建博客教程</a></p>
<h2 id="为何选择Github_pages">为何选择Github pages</h2><ul>
<li>有三百兆免费空间并且相当稳定</li>
<li>对于学习写程序的人，是一个不错的练习Github的机会</li>
<li>用markdown写博客，更方便控制博客，更加灵活</li>
<li>时刻保持博客备份</li>
<li>与其他的github上项目相结合</li>
</ul>
<p>如果Github在国内被墙呢？可以选择用国内版本的github：gitcafe。据说访问速度比github更快。</p>
<p><a href="https://pages.github.com/" target="_blank" rel="external">Githup pages</a><br>是用户编写的、托管在github上的静态网页。它可以用来做你的项目网站，也可以用来做博客。</p>
<h2 id="Github使用">Github使用</h2><p>假设你是跟我一样对Github不太熟悉的人，一些基本的Github知识或许对你有用。</p>
<p>以下主要参考beiyuu的《使用Github Pages建独立博客》写成。或者你可以直接查看cnfeat的<a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a>的github配置部分。这里大部分直接引用，有少量修改</p>
<h3 id="Git安装">Git安装</h3><p>你可以先下载<a href="http://git-scm.com/" target="_blank" rel="external">git</a>。git是一个开源的版本控制软件。安装成功以后打开Git Bash可以用来输入指令跟Github内容同步<br>然后可以登陆Github <a href="https://github.com/" target="_blank" rel="external">https://github.com/</a>  注册一个账号。注意如果你不购买自己的域名的话，你的账户名.github.io将成为你的博客地址。</p>
<a id="more"></a>  
<h3 id="配置SSH_keys">配置SSH keys</h3><p>我们如何让本地git项目与远程的github建立联系呢？用SSH keys。</p>
<h4 id="检查SSH_keys的设置">检查SSH keys的设置</h4><p>首先我们需要检查你电脑上现有的ssh key：</p>
<pre><code>$ <span class="built_in">cd</span> ~/.ssh <span class="comment">#检查本机的ssh密钥</span>
</code></pre><p>如果提示：No such file or directory 说明你是第一次使用git。</p>
<h4 id="生成新的SSH_Key：">生成新的SSH Key：</h4><pre><code>$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span>
Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.
Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;`
</code></pre><p>注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」</p>
<p>然后系统会要你输入密码：</p>
<pre><code>Enter passphrase (empty <span class="keyword">for</span> no passphrase):<span class="variable">&lt;输入加密串&gt;</span>
Enter same passphrase again:<span class="variable">&lt;再次输入加密串&gt;</span>
</code></pre><p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p>
<p>注意：输入密码的时候没有*字样的，你直接输入就可以了。</p>
<h4 id="添加SSH_Key到GitHub">添加SSH Key到GitHub</h4><p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>
<ol>
<li>打开本地C:\Documents and Settings\Administrator.ssh\id_rsa.pub文件。<br>在windows 7下地址是C:\User\用户名.ssh\id_rsa.pub<br>此文件里面内容为刚才生成密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</li>
<li>登陆github系统。点击右上角的 Account Settings—-&gt;SSH Public keys —-&gt; add another public keys</li>
<li>把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了</li>
</ol>
<h4 id="测试">测试</h4><p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<pre><code><span class="variable">$ </span>ssh -<span class="constant">T </span>git<span class="variable">@github</span>.com
</code></pre><p>如果是下面的反馈：</p>
<pre><code>The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.97.227.239)' can't be established.</span>
RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48.</span>
Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?
</code></pre><p>不要紧张，输入yes就好，然后会看到：</p>
<pre><code>Hi! You've successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span> provide shell access.
</code></pre><h4 id="设置用户信息">设置用户信息</h4><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p>
<p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的</p>
<pre><code>$ git config --global user<span class="class">.name</span> 用户名<span class="comment">//用户名</span>
$ git config --global user<span class="class">.email</span>  用户名@gmail.com<span class="string">"//填写自己的邮箱</span>
</code></pre><p>SSH Key配置成功<br>本机已成功连接到github。</p>
<h3 id="使用GitHub_Pages建立博客">　使用GitHub Pages建立博客</h3><p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。</p>
<p>想建立个人博客是用的第一种，形如cnfeat.github.io这样的可访问的站，每个用户名下面只能建立一个。</p>
<p>github上建立仓库<br>登录后系统，在github首页，点击页面右下角「New Repository」并填写信息</p>
<p>点击「Create Repository」 完成创建。</p>
<h2 id="博客程序选择">博客程序选择</h2><p>有好几种不同的程序可以用来在Github pages上建立静态博客。Github pages官方推荐Jekyll,Octopress是Jekyll的再开发，Hexo现在有越来越流行的趋势。<br>下面是对几种常用的静态博客程序的比较</p>
<h3 id="Jekyll">Jekyll</h3><ul>
<li>语言：Ruby </li>
<li>优势：与Github pages官方合作。应用最广，有很好的文档，众多的模板和插件。 可以从wp移植博客。可以在github上更新博客。可以通过prose.io直接写博客。</li>
<li>缺点： 模板基于liquid template engine，更改较复杂</li>
<li>安装：稍复杂。再开发版本Jekyllboostrap可以在几分钟之内搞定博客，但是可选择主题较少</li>
</ul>
<h3 id="Octopress">Octopress</h3><ul>
<li>语言：Ruby</li>
<li>优势：基于Jekyll，为开发者使用，默认安装很多插件，更容易个性化各种设置。模板与插件与Jekyll互通。</li>
<li>安装：与Jekyll相似</li>
</ul>
<h3 id="Hexo">Hexo</h3><ul>
<li>语言：note.js</li>
<li>优势：轻量静态博客，与以上相比速度更快，适合博客内容很多的用户。可以从多个平台（比如wp，joomla）移植博客。可以使用绝大多数octopress插件</li>
<li>缺点：需要在本地更新博客</li>
<li>安装：较简单</li>
</ul>
<p>其实我每个都装了一遍。。但最后还是选择了Hexo。为神马？因为觉得Hexo的一个主题好好看呐。。。<br>然后，在想象中自己一定会写很多东西，所以一定需要速度很快 </p>
<h2 id="Hexo安装和配置">Hexo安装和配置</h2><h3 id="hexo安装">hexo安装</h3><p>打开git bash,输入</p>
<pre><code>$ npm <span class="keyword">install</span> -g hexo
</code></pre><p>在我的电脑中建立一个名字叫「Hexo」的文件夹(或者别的名字也可以)，然后在此文件夹中右键打开Git Bash。然后输入</p>
<pre><code><span class="variable">$ </span>hexo init       <span class="comment">#初始化hexo到指定目录</span>
<span class="variable">$ </span>hexo generate   <span class="comment">#在目录下生成静态网页</span>
<span class="variable">$ </span>hexo server     <span class="comment">#运行本地服务</span>
</code></pre><p>这个时候hexo已经用默认模板搭建好了博客，浏览器输入<a href="http://localhost:4000就可以看到效果。" target="_blank" rel="external">http://localhost:4000就可以看到效果。</a></p>
<h3 id="Hexo_配置">Hexo 配置</h3><p>可以在Hexo文件夹里的_config.yml里面对Hexo进行设置:<br>Hexo有三层</p>
<ul>
<li>post    source/_posts  帖子</li>
<li>page    source   页面</li>
<li>draft    source/_drafts   草稿</li>
</ul>
<p>新生成帖子的时候，默认文件名为帖子主题名，但是你也可以设定为时间加上主题名，与最主流的github静态博客Jekyll格式保持一致</p>
<pre><code><span class="symbol">new_post_name:</span> <span class="symbol">:year-</span><span class="symbol">:month-</span><span class="symbol">:day-</span><span class="symbol">:title</span>.md <span class="comment"># File name of new posts</span>
</code></pre><p>设置deploy可以一键将博客内容部署到github上</p>
<pre><code><span class="attribute">deploy</span>:
<span class="attribute">type</span>: git   #部署类型, 本文使用Github
<span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:username/username.github.io.git  #部署的仓库的SSH
<span class="attribute">branch</span>: master   #部署分支,一般使用master主分支
</code></pre><p>Hexo还支持安装各种插件，比如说rss订阅 hexo-generator-feed<br>可以在hexo官网上找到列表</p>
<h3 id="Hexo主题选择">Hexo主题选择</h3><p>Hexo官网提供了不少主题 <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a> </p>
<p>知乎上有个不错的讨论，谈到了hexo各个主题的优缺点<br><a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external">http://www.zhihu.com/question/24422335</a></p>
<p>这里我选择了国人开发的Next，很喜欢它简单优雅<br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">https://github.com/iissnan/hexo-theme-next</a></p>
<p>以此为例如何安装主题。</p>
<pre><code><span class="variable">$ </span>cd <span class="constant">Hexo </span> <span class="comment">#进入你安装hexo的文件夹</span>
<span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/iissnan</span><span class="regexp">/hexo-theme-next themes/next</span>  <span class="comment">#克隆主题到theme文件夹下</span>
</code></pre><p>然后更改站点 _config.yml 中的 theme 字段设置为 next<br>用Next 主题的好处还有作者是中国人，有非常详尽的文档，帮助配置主题。</p>
<p>更改了主题以后，可以使用<br>    $ hexo generate   #在目录下生成静态网页<br>    $ hexo server     #运行本地服务<br>查看效果</p>
<h3 id="开始写文章">开始写文章</h3><pre><code>hexo <span class="keyword">new</span> <span class="string">"postName"</span>  <span class="preprocessor">#新建博文,其中postName是博文题目</span>
</code></pre><p>博文会自动生成在博客目录下source/_posts\postName.md</p>
<pre><code><span class="preprocessor">#文件自动生成格式:</span>
<span class="label">title:</span> <span class="string">"It Starts with iGaze: Visual Attention Driven Networkingwith Smart Glasses"</span>  <span class="preprocessor">#博文题目</span>
<span class="label">date:</span> <span class="number">2014</span>-<span class="number">11</span>-<span class="number">21</span> <span class="number">11</span>:<span class="number">25</span>:<span class="number">38</span>      <span class="preprocessor">#生成时间</span>
<span class="label">tags:</span> Paper                    <span class="preprocessor">#标签, 多个标签使用格式[Paper1, Paper2, Paper3,...]</span>
<span class="label">categories:</span> cate1              <span class="preprocessor">#分类</span>
</code></pre><p>接下来可以用markdownPad之类直接进行编辑。<br>如果不想博文在首页全部显示, 并能出现阅读全文按钮效果, 需要在你想在首页显示的部分下添加<!--more--></p>
<pre><code>此处及以上的内容会在首页显示
<span class="comment">&lt;!--more--&gt;</span>   
一下是在首页隐藏的部分
</code></pre><p>文章写好以后，如果已经在hexo的config里面设置过deploy，可以使用命令</p>
<pre><code><span class="variable">$ </span>hexo generate   <span class="comment">#在目录下生成静态网页</span>
<span class="variable">$ </span>hexo deploy     <span class="comment">#部署到站点</span>
</code></pre><p>发布到博客地址 username.github.io</p>
<p>hexo也支持缩略命令，所以也可以使用<br>    $ hexo g —d      #生成并部署</p>
<p>如此一个独立的静态博客就做好了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在学习用github的时候偶然看见可以用github pages搭建博客，很感兴趣，毕竟要买服务器搭建独立博客的话，总是要考虑空间续费以及会不会被墙的问题。对于github是新手，即使看了很多教程也依然花了好些时间来熟悉操作。教程也并不是尽善尽美。 在终于搭建好以后，还是决定把步骤详细地记录一下，并附上自己的一些心得，万一哪天有一个跟我一样的小白用得上呢：）</p>
<p>首先附上我参考的一些教程，感谢写下详细教程的各位。</p>
<p><a href="http://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>
<p><a href="http://andrewliu.tk/2014/11/21/通过Hexo在Github上搭建博客教程">通过Hexo在Github上搭建博客教程</a></p>
<h2 id="为何选择Github_pages">为何选择Github pages</h2><ul>
<li>有三百兆免费空间并且相当稳定</li>
<li>对于学习写程序的人，是一个不错的练习Github的机会</li>
<li>用markdown写博客，更方便控制博客，更加灵活</li>
<li>时刻保持博客备份</li>
<li>与其他的github上项目相结合</li>
</ul>
<p>如果Github在国内被墙呢？可以选择用国内版本的github：gitcafe。据说访问速度比github更快。</p>
<p><a href="https://pages.github.com/">Githup pages</a><br>是用户编写的、托管在github上的静态网页。它可以用来做你的项目网站，也可以用来做博客。</p>
<h2 id="Github使用">Github使用</h2><p>假设你是跟我一样对Github不太熟悉的人，一些基本的Github知识或许对你有用。</p>
<p>以下主要参考beiyuu的《使用Github Pages建独立博客》写成。或者你可以直接查看cnfeat的<a href="http://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a>的github配置部分。这里大部分直接引用，有少量修改</p>
<h3 id="Git安装">Git安装</h3><p>你可以先下载<a href="http://git-scm.com/">git</a>。git是一个开源的版本控制软件。安装成功以后打开Git Bash可以用来输入指令跟Github内容同步<br>然后可以登陆Github <a href="https://github.com/">https://github.com/</a>  注册一个账号。注意如果你不购买自己的域名的话，你的账户名.github.io将成为你的博客地址。</p>]]>
    
    </summary>
    
      <category term="github hexo blog" scheme="http://yoursite.com/tags/github-hexo-blog/"/>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdwon-intro]]></title>
    <link href="http://yoursite.com/2015/06/25/markdwon-intro/"/>
    <id>http://yoursite.com/2015/06/25/markdwon-intro/</id>
    <published>2015-06-25T14:48:27.000Z</published>
    <updated>2015-06-25T14:49:36.000Z</updated>
    <content type="html"><![CDATA[<p>markdown是一种电子邮件风格的语言。它的优点有如下</p>
<ul>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li>
<li>让你专注于文字而不是排版。</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li>
<li>Markdown 的标记语法有极好的可读性。</li>
</ul>
<p>正因为如此，它被越来越多地应用在生成电子书，博客编写，制作注释文档上。之前写论文常用latex，用久了也把麻烦当自然，现在看了markdown语法，一对比之下深觉markdown清爽而有美感。某篇文章里说人人都该学习markdown，我想，对于常要写点东西的人，花费几个小时学习的确会给之后节省太多精力。<br>markdown的语法是非常简单的，网上也已有很好的指南，比如<br>一些中文入门 <a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="external">markdown写作浅谈</a>        <a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">markdown新手入门</a><br>以及更详尽的语法 <a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">markdown语法说明</a><br>自己开个帖子记录总结一下经常会用到的语法，方便查阅</p>
<p>当然，好的编辑器可以省下一些力气。<br>比如说在线的<a href="https://stackedit.io/" target="_blank" rel="external">stackedit</a>   提供即时编译，而且可以同步到dropbox 和googdrive， 或者直接发布到github上<br>本地的editor，<a href="http://markdownpad.com/" target="_blank" rel="external">markdownpad</a>是比较多人推荐的</p>
<hr>
<h3 id="区段元素"><strong>区段元素</strong></h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。<br>在特殊符号和文本之间（比如 # 和 标题）建议保留一个字符的空格，这是最标准的 Markdown 写法。</p>
<h4 id="标题"><strong>标题</strong></h4><p>在 Markdown 中，你只需要在文本前面加上 # 即可使其变成标题，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加  # 即可，标题字号相应降低。</p>
<pre><code><span class="preprocessor"># 一级标题</span>
<span class="preprocessor">## 二级标题</span>
<span class="preprocessor">### 三级标题</span>
<span class="preprocessor">#### 四级标题</span>
<span class="preprocessor">##### 五级标题</span>
<span class="preprocessor">###### 六级标题</span>
</code></pre><h4 id="列表"><strong>列表</strong></h4><p>列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 - 就可以了，例如：</p>
<pre><code>-<span class="ruby"> 文本<span class="number">1</span>
</span>-<span class="ruby"> 文本<span class="number">2</span>
</span>-<span class="ruby"> 文本<span class="number">3</span></span>
</code></pre><ul>
<li>效果</li>
</ul>
<p>你也可以用+ 或者 * 代表无序列表</p>
<p>如果你希望有序列表，也可以在文字前面加上 1. 2. 3. 就可以了，例如：</p>
<pre><code><span class="bullet">1. </span>文本1
<span class="bullet">2. </span>文本2
<span class="bullet">3. </span>文本3
</code></pre><ol>
<li><p>效果</p>
<h4 id="引用"><strong>引用</strong></h4><p>在引用一行或者一段话的时候，只需要在前面加上一个 &gt;,就像email引文部分一样。</p>
<blockquote>
<p>今天是捕香蕉鱼的好日子</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>今天是捕香蕉鱼的好日子<br>可以嵌套引用，只需在二层引用的地方多加一个&gt;</p>
<h4 id="代码区块"><strong>代码区块</strong></h4><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
</blockquote>
<p>这是一个普通段落：</p>
<pre><code>这是一个代码区块。
</code></pre><h4 id="分隔线"><strong>分隔线</strong></h4><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<pre><code><span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
- - -
---------------------------------------
</code></pre><h3 id="区段元素-1">区段元素</h3><p>在 Markdown 中，插入链接只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：</p>
<pre><code>[<span class="link_label">微博</span>](<span class="link_url">www.weibo.com</span>)
</code></pre><p>在 Markdown 中，插入图片只需要使用 <code>![](图片链接地址)</code> 这样的语法即可，例如：</p>
<pre><code>!<span class="attr_selector">[]</span>(<span class="attribute">http</span>:<span class="comment">//ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg)  </span>
</code></pre><h4 id="强调"><strong>强调</strong></h4><p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</p>
<pre><code><span class="keyword">*</span><span class="keyword">*</span>文本1<span class="keyword">*</span><span class="keyword">*</span> <span class="keyword">*</span>文本2<span class="keyword">*</span>
</code></pre><p><strong>文本1</strong> <em>文本2</em></p>
<h4 id="表格"><strong>表格</strong></h4><pre><code>dog |<span class="string"> bird </span>|<span class="string"> cat
----</span>|<span class="string">------</span>|<span class="string">----
foo </span>|<span class="string"> foo  </span>|<span class="string"> foo
bar </span>|<span class="string"> bar  </span>|<span class="string"> bar
baz </span>|<span class="string"> baz  </span>|<span class="string"> baz</span>
</code></pre><table>
<thead>
<tr>
<th>dog</th>
<th>bird</th>
<th>cat</th>
</tr>
</thead>
<tbody>
<tr>
<td>foo</td>
<td>foo</td>
<td>foo</td>
</tr>
<tr>
<td>bar</td>
<td>bar</td>
<td>bar</td>
</tr>
<tr>
<td>baz</td>
<td>baz</td>
<td>baz</td>
</tr>
</tbody>
</table>
<h4 id="反斜杠"><strong>反斜杠</strong></h4><p>有一些特殊符号，如果你并不需要它改变文本格式，可以直接在之前加上反斜杠</p>
<pre><code>\<span class="keyword">*</span>文本<span class="keyword">*</span>
</code></pre><p>*文本*</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>markdown是一种电子邮件风格的语言。它的优点有如下</p>
<ul>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li>
<li>让你专注于文字而不是排版。</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等]]>
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>